/*
STX: 000000000010 (0x002)
VT:  000000001011 (0x00B)
RN:  000001xxxxxx (bits: [00000][1][32][16][8][4][2][1])
HT:  000000001001 (0x009)
CN:  000001xxxxxx (bits: [00000][1][32][16][8][4][2][1])
CHAR: 12 bits (BF1-BF2 + bordes + ASCII)
ETX: 000000000011 (0x003)
*/

#include <Arduino.h>

// Constantes exactas según especificación (12 bits)
const uint16_t STX = 0x002;  // 000000000010
const uint16_t VT = 0x00B;   // 000000001011
const uint16_t HT = 0x009;   // 000000001001
const uint16_t ETX = 0x003;  // 000000000011

struct VramChar {
  uint8_t row;    // Fila (1-41)
  uint8_t col;    // Columna (1-64)
  uint16_t data;  // Carácter (12 bits)
};

void send12Bits(uint16_t data) {
  data &= 0x0FFF;  // Usar 12 bits BAJOS
  Serial.write((data >> 8) & 0xFF);  // Byte alto (bits 11-8)
  Serial.write(data & 0xFF);         // Byte bajo (bits 7-0)
}

uint16_t encodePosition(uint8_t pos) {
  // Codificar RN/CN como 000001 + 6 bits (pos-1)
  return 0x0040 | (pos - 1);  // 0x0040 = 000001000000
}

void sendVramChar(const VramChar &vchar) {
  send12Bits(STX);
  send12Bits(VT);
  send12Bits(encodePosition(vchar.row));  // RN
  send12Bits(HT);
  send12Bits(encodePosition(vchar.col));  // CN
  send12Bits(vchar.data);                 // CHAR (sin desplazamiento)
  send12Bits(ETX);
}

void clearScreen() {
  VramChar clear_char;
  clear_char.data = (0b00 << 10) | (0b000 << 7) | ' ';  // Espacio sin bordes

  for (uint8_t row = 1; row <= 41; row++) {
    clear_char.row = row;
    for (uint8_t col = 1; col <= 64; col++) {
      clear_char.col = col;
      sendVramChar(clear_char);
      delayMicroseconds(1);  // Pequeña pausa para evitar saturación
    }
  }
  Serial.flush();
}

void setup() {
  Serial.begin(500000);
  while (!Serial)
    ;
  //pinMode(LED_BUILTIN, OUTPUT);
}

byte C0 = 0b000;  // nada
byte C1 = 0b001;  // arriba
byte C2 = 0b010;  // izquierda
byte C3 = 0b011;  // arriba-izquierda
byte C4 = 0b100;  // abajo
byte C5 = 0b101;  // arriba-abajo
byte C6 = 0b110;  // izquierda-abajo
byte C7 = 0b111;  // arriba-izquierda-abajo

void loop() {
  VramChar test_chars[112] = {
    { 3, 1, (0b11 << 10) | (C3 << 7) | 'A' },
    { 3, 2, (0b11 << 10) | (C1 << 7) | '/' },
    { 3, 3, (0b11 << 10) | (C1 << 7) | 'N' },
    { 3, 4, (0b11 << 10) | (C2 << 7) | ' ' },
    { 4, 1, (0b11 << 10) | (C6 << 7) | 'P' },
    { 4, 2, (0b11 << 10) | (C4 << 7) | 'A' },
    { 4, 3, (0b11 << 10) | (C4 << 7) | 'G' },
    { 4, 4, (0b11 << 10) | (C2 << 7) | ' ' },
    { 3, 5, (0b11 << 10) | (C3 << 7) | 'L' },
    { 3, 6, (0b11 << 10) | (C1 << 7) | 'I' },
    { 3, 7, (0b11 << 10) | (C1 << 7) | 'N' },
    { 3, 8, (0b11 << 10) | (C2 << 7) | ' ' },
    { 4, 5, (0b11 << 10) | (C6 << 7) | 'U' },
    { 4, 6, (0b11 << 10) | (C4 << 7) | 'P' },
    { 4, 7, (0b11 << 10) | (C4 << 7) | ' ' },
    { 4, 8, (0b11 << 10) | (C2 << 7) | ' ' },
    { 6, 1, (0b11 << 10) | (C3 << 7) | ' ' },
    { 6, 2, (0b11 << 10) | (C1 << 7) | 'S' },
    { 6, 3, (0b11 << 10) | (C1 << 7) | 'U' },
    { 6, 4, (0b11 << 10) | (C2 << 7) | ' ' },
    { 7, 1, (0b11 << 10) | (C6 << 7) | 'A' },
    { 7, 2, (0b11 << 10) | (C4 << 7) | 'I' },
    { 7, 3, (0b11 << 10) | (C4 << 7) | 'R' },
    { 7, 4, (0b11 << 10) | (C2 << 7) | ' ' },
    { 6, 5, (0b11 << 10) | (C3 << 7) | 'H' },
    { 6, 6, (0b11 << 10) | (C1 << 7) | 'L' },
    { 6, 7, (0b11 << 10) | (C1 << 7) | 'D' },
    { 6, 8, (0b11 << 10) | (C2 << 7) | ' ' },
    { 7, 5, (0b11 << 10) | (C6 << 7) | 'F' },
    { 7, 6, (0b11 << 10) | (C4 << 7) | 'R' },
    { 7, 7, (0b11 << 10) | (C4 << 7) | ' ' },
    { 7, 8, (0b11 << 10) | (C2 << 7) | ' ' },
    { 33, 1, (0b11 << 10) | (C3 << 7) | 'O' },
    { 33, 2, (0b11 << 10) | (C1 << 7) | 'P' },
    { 33, 3, (0b11 << 10) | (C1 << 7) | 'T' },
    { 33, 4, (0b11 << 10) | (C2 << 7) | ' ' },
    { 34, 1, (0b11 << 10) | (C6 << 7) | 'S' },
    { 34, 2, (0b11 << 10) | (C4 << 7) | 'E' },
    { 34, 3, (0b11 << 10) | (C4 << 7) | 'T' },
    { 34, 4, (0b11 << 10) | (C2 << 7) | ' ' },
    { 33, 5, (0b11 << 10) | (C3 << 7) | 'G' },
    { 33, 6, (0b11 << 10) | (C1 << 7) | 'T' },
    { 33, 7, (0b11 << 10) | (C1 << 7) | ' ' },
    { 33, 8, (0b11 << 10) | (C2 << 7) | ' ' },
    { 34, 5, (0b11 << 10) | (C6 << 7) | 'A' },
    { 34, 6, (0b11 << 10) | (C4 << 7) | 'U' },
    { 34, 7, (0b11 << 10) | (C4 << 7) | 'T' },
    { 34, 8, (0b11 << 10) | (C2 << 7) | ' ' },
    { 36, 1, (0b11 << 10) | (C3 << 7) | 'R' },
    { 36, 2, (0b11 << 10) | (C1 << 7) | 'G' },
    { 36, 3, (0b11 << 10) | (C1 << 7) | 'S' },
    { 36, 4, (0b11 << 10) | (C2 << 7) | ' ' },
    { 37, 1, (0b11 << 10) | (C6 << 7) | ' ' },
    { 37, 2, (0b11 << 10) | (C4 << 7) | ' ' },
    { 37, 3, (0b11 << 10) | (C4 << 7) | ' ' },
    { 37, 4, (0b11 << 10) | (C2 << 7) | ' ' },
    { 36, 5, (0b11 << 10) | (C3 << 7) | 'A' },
    { 36, 6, (0b11 << 10) | (C1 << 7) | 'T' },
    { 36, 7, (0b11 << 10) | (C1 << 7) | 'K' },
    { 36, 8, (0b11 << 10) | (C2 << 7) | ' ' },
    { 37, 5, (0b11 << 10) | (C6 << 7) | 'J' },
    { 37, 6, (0b11 << 10) | (C4 << 7) | 'A' },
    { 37, 7, (0b11 << 10) | (C4 << 7) | 'M' },
    { 37, 8, (0b11 << 10) | (C2 << 7) | ' ' },
    { 39, 1, (0b10 << 10) | (C3 << 7) | 'R' },
    { 39, 2, (0b10 << 10) | (C1 << 7) | 'A' },
    { 39, 3, (0b10 << 10) | (C1 << 7) | 'D' },
    { 39, 4, (0b11 << 10) | (C2 << 7) | ' ' },
    { 40, 1, (0b10 << 10) | (C6 << 7) | 'S' },
    { 40, 2, (0b10 << 10) | (C4 << 7) | 'I' },
    { 40, 3, (0b10 << 10) | (C4 << 7) | 'L' },
    { 40, 4, (0b11 << 10) | (C2 << 7) | ' ' },
    { 39, 5, (0b11 << 10) | (C3 << 7) | 'L' },
    { 39, 6, (0b11 << 10) | (C1 << 7) | 'D' },
    { 39, 7, (0b11 << 10) | (C1 << 7) | ' ' },
    { 39, 8, (0b11 << 10) | (C2 << 7) | ' ' },
    { 40, 5, (0b11 << 10) | (C6 << 7) | 'R' },
    { 40, 6, (0b11 << 10) | (C4 << 7) | 'A' },
    { 40, 7, (0b11 << 10) | (C4 << 7) | 'D' },
    { 40, 8, (0b11 << 10) | (C2 << 7) | ' ' },
    { 39, 9, (0b11 << 10) | (C3 << 7) | 'R' },
    { 39, 10, (0b11 << 10) | (C1 << 7) | 'N' },
    { 39, 11, (0b11 << 10) | (C1 << 7) | 'G' },
    { 39, 12, (0b11 << 10) | (C2 << 7) | ' ' },
    { 40, 9, (0b11 << 10) | (C6 << 7) | 'G' },
    { 40, 10, (0b11 << 10) | (C4 << 7) | 'T' },
    { 40, 11, (0b11 << 10) | (C4 << 7) | ' ' },
    { 40, 12, (0b11 << 10) | (C2 << 7) | ' ' },
    { 39, 53, (0b11 << 10) | (C3 << 7) | 'T' },
    { 39, 54, (0b11 << 10) | (C1 << 7) | 'R' },
    { 39, 55, (0b11 << 10) | (C1 << 7) | 'K' },
    { 39, 56, (0b11 << 10) | (C2 << 7) | ' ' },
    { 40, 53, (0b11 << 10) | (C6 << 7) | 'T' },
    { 40, 54, (0b11 << 10) | (C4 << 7) | 'V' },
    { 40, 55, (0b11 << 10) | (C4 << 7) | 'X' },
    { 40, 56, (0b11 << 10) | (C2 << 7) | ' ' },
    { 39, 57, (0b11 << 10) | (C3 << 7) | 'T' },
    { 39, 58, (0b11 << 10) | (C1 << 7) | '0' },
    { 39, 59, (0b11 << 10) | (C1 << 7) | ' ' },
    { 39, 60, (0b11 << 10) | (C2 << 7) | ' ' },
    { 40, 57, (0b11 << 10) | (C6 << 7) | ' ' },
    { 40, 58, (0b11 << 10) | (C4 << 7) | '3' },
    { 40, 59, (0b11 << 10) | (C4 << 7) | ' ' },
    { 40, 60, (0b11 << 10) | (C2 << 7) | ' ' },
    { 39, 61, (0b11 << 10) | (C3 << 7) | 'S' },
    { 39, 62, (0b11 << 10) | (C1 << 7) | 'B' },
    { 39, 63, (0b11 << 10) | (C1 << 7) | ' ' },
    { 39, 64, (0b11 << 10) | (C2 << 7) | ' ' },
    { 40, 61, (0b11 << 10) | (C6 << 7) | ' ' },
    { 40, 62, (0b11 << 10) | (C4 << 7) | ' ' },
    { 40, 63, (0b11 << 10) | (C4 << 7) | ' ' },
    { 40, 64, (0b11 << 10) | (C2 << 7) | ' ' }
  };

  for (auto &c : test_chars) {
    sendVramChar(c);
    //delay(1);
  }

}